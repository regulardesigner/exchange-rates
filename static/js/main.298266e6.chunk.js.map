{"version":3,"sources":["components/Tips.js","App.js","serviceWorker.js","index.js"],"names":["Tips","result","currency","ten","toFixed","fiftheen","twenty","className","style","textAlign","marginTop","role","aria-label","App","props","handleChange","event","exchange","state","target","name","value","setState","handleCurrencyChange","isLoading","fetch","then","respond","json","catch","error","console","fetchError","data","rates","date","base","selected","currencies","USD","this","type","onChange","disabled","loading","screen","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.298266e6.chunk.js","sourcesContent":["import React from 'react';\n\nimport './tips.scss';\n\nconst Tips = ({ result, currency }) => {\n  const ten = (result * 0.10).toFixed(2);\n  const fiftheen = (result * 0.15).toFixed(2);\n  const twenty = (result * 0.2).toFixed(2);\n  return (\n    <section className=\"tips\">\n      <h2 style={{ textAlign: \"center\", marginTop: \"2em\" }}>Tips calculator</h2>\n      <div className=\"tips-boxes\">\n        <div className=\"tips-boxes-10\">\n          <span className=\"emo\" role=\"img\" aria-label=\"Neutral face\">üòê</span>\n          {ten} {currency}\n        </div>\n        <div className=\"tips-boxes-15\">\n          <span className=\"emo\" role=\"img\" aria-label=\"Slightly smiling face\">üôÇ</span>\n          {fiftheen} {currency}\n        </div>\n        <div className=\"tips-boxes-20\">\n          <span className=\"emo\" role=\"img\" aria-label=\"Grinning face\">üòÉ</span>\n          {twenty} {currency}\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Tips;\n","import React from 'react';\n\nimport './App.scss';\n\nimport Tips from './components/Tips';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true,\n      fetchError: false,\n      rates: null,\n      currencies: {\n        base: 'EUR',\n        selected: 'USD',\n      },\n      exchange: {\n        base: 1,\n        selected: null,\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://api.exchangeratesapi.io/latest')\n    .then((respond) => respond.json())\n    .catch((error) => {\n      console.error(error);\n      this.setState({\n        fetchError: true,\n      })\n    })\n    .then((data) => {\n      this.setState({\n        isLoading: false,\n        rates: data,\n        date: data.date,\n        exchange: {\n          base: 1,\n          selected: data.rates.USD,\n        }\n      })\n    });\n  }\n\n  // handle controled fields\n  handleChange = event => {\n    const { exchange } = { ...this.state };\n    const { name, value } = event.target;\n    exchange[name] = value;\n    this.setState({ exchange });\n  }\n\n  handleCurrencyChange = event => {\n    // get the event target value\n    const { name, value } = event.target;\n\n    if(name === \"base\") {\n      // 1. user see that the app is fetching new rates data\n      this.setState({ isLoading: true })\n      // 2. fetching the data based on the new currency base\n      fetch(`https://api.exchangeratesapi.io/latest?base=${value}`)\n      .then((respond) => respond.json())\n      .catch((error) => {\n        console.error(error);\n        this.setState({\n          fetchError: true,\n        })\n      })\n      .then((data) => {\n        this.setState({\n          isLoading: false,\n          rates: data,\n          date: data.date,\n          exchange: {\n            base: 1,\n            selected: data.rates[value],\n          },\n          currencies: {\n            base: value,\n            selected: value,\n          },\n        })\n      });\n    } else {\n      // get the current state\n      const { currencies } = { ...this.state };\n      const { exchange } = { ...this.state };\n      // change the state copy\n      currencies[name] = value;\n      exchange['selected'] = this.state.rates.rates[value];\n      // push to the state the changes\n      this.setState({ currencies, exchange });\n    }\n  }\n\n  screen() {\n    const { base, selected } = this.state.exchange;\n    //const { base, selected } = this.state.currencies;\n    return (\n      <div className=\"app-container\">\n        <header className=\"app-header\">\n          <h1 style={{ marginTop: \"2rem\", textAlign: \"center\" }}>Exchange rates</h1>\n        </header>\n        <section>\n        <div className=\"app-exchange\">\n            <div className=\"input from\">\n              <input className=\"input-item\" type=\"number\" name=\"base\" value={base} onChange={this.handleChange}/>\n              <select\n                name=\"base\"\n                onChange={this.handleCurrencyChange}\n                value={this.state.currencies.base}\n              >\n                <option value=\"AUD\">AUD</option>\n                <option value=\"CAD\">CAD</option>\n                <option value=\"USD\">USD</option>\n                <option value=\"EUR\">EUR</option>\n              </select>\n            </div>\n            <div className=\"input to\">\n              <input disabled className=\"input-item\" type=\"number\" name=\"selected\" value={(base*selected).toFixed(2)}/>\n              <select\n                name=\"selected\"\n                onChange={this.handleCurrencyChange}\n                value={this.state.currencies.selected}\n              >\n                <option value=\"AUD\">AUD</option>\n                <option value=\"CAD\">CAD</option>\n                <option value=\"USD\">USD</option>\n                <option value=\"EUR\">EUR</option>\n              </select>\n            </div>\n          </div>\n        </section>\n        <Tips result={base} currency={this.state.currencies.base} />\n      </div>\n    )\n  }\n\n  loading() {\n    return (\n      <div className=\"app-load\">\n        Fetching rates datas\n      </div>\n    )\n  }\n\n  error() {\n    return (\n      <div className=\"app-error\">\n        <h1>FETCH ERROR</h1>\n        <p>Take a look at the console.log error...</p>\n      </div>\n    )\n  }\n\n  render () {\n    const { isLoading } = this.state;\n    const { fetchError } = this.state;\n    return (\n      <div className=\"app\">\n        { fetchError && this.error() }\n        { isLoading && this.loading() }\n        { isLoading || this.screen() }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}