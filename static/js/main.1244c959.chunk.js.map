{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","isLoading","fetchError","rates","currencies","base","selected","fetch","then","respond","json","catch","error","console","setState","data","date","this","className","type","value","name","id","loading","screen","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPA6FeA,G,kBAzFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,WAAW,EACXC,YAAY,EACZC,MAAO,KACPC,WAAY,CACVC,KAAM,MACNC,SAAU,QARG,E,iFAaE,IAAD,OAClBC,MAAM,0CACLC,MAAK,SAACC,GAAD,OAAaA,EAAQC,UAC1BC,OAAM,SAACC,GACNC,QAAQD,MAAMA,GACd,EAAKE,SAAS,CACZZ,YAAY,OAGfM,MAAK,SAACO,GACL,EAAKD,SAAS,CACZb,WAAW,EACXE,MAAOY,EACPC,KAAMD,EAAKC,Y,+BAKP,IAAD,EACoBC,KAAKjB,MAAMI,WAA9BC,EADD,EACCA,KAAMC,EADP,EACOA,SACd,OACE,yBAAKY,UAAU,iBACb,4BAAQA,UAAU,cAChB,8CACA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cACb,2BAAOC,KAAK,OAAOC,MAAOf,IAC1B,4BAAQgB,KAAK,GAAGC,GAAG,IACjB,4BAAQF,MAAM,OAAd,SAGJ,yBAAKF,UAAU,YACb,2BAAOC,KAAK,OAAOC,MAAOd,IAC1B,4BAAQe,KAAK,GAAGC,GAAG,IACjB,4BAAQF,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,c,gCAUZ,OACE,yBAAKF,UAAU,YAAf,0B,8BAOF,OACE,yBAAKA,UAAU,aACb,2CACA,yE,+BAKK,IACDjB,EAAcgB,KAAKjB,MAAnBC,UACAC,EAAee,KAAKjB,MAApBE,WACR,OACE,yBAAKgB,UAAU,OACXhB,GAAce,KAAKL,QACnBX,GAAagB,KAAKM,UAClBtB,GAAagB,KAAKO,c,GApFVC,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.1244c959.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true,\n      fetchError: false,\n      rates: null,\n      currencies: {\n        base: 'EUR',\n        selected: 'USD',\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://api.exchangeratesapi.io/latest')\n    .then((respond) => respond.json())\n    .catch((error) => {\n      console.error(error);\n      this.setState({\n        fetchError: true,\n      })\n    })\n    .then((data) => {\n      this.setState({\n        isLoading: false,\n        rates: data,\n        date: data.date,\n      })\n    });\n  }\n\n  screen() {\n    const { base, selected } = this.state.currencies;\n    return (\n      <div className=\"app-container\">\n        <header className=\"app-header\">\n          <h1>Exchange rates</h1>\n          <div className=\"app-exchange\">\n            <div className=\"input from\">\n              <input type=\"text\" value={base}/>\n              <select name=\"\" id=\"\">\n                <option value=\"EUR\">EUR</option>\n              </select>\n            </div>\n            <div className=\"input to\">\n              <input type=\"text\" value={selected}/>\n              <select name=\"\" id=\"\">\n                <option value=\"AUD\">AUD</option>\n                <option value=\"CAD\">CAD</option>\n                <option value=\"USD\">USD</option>\n                <option value=\"EUR\">EUR</option>\n              </select>\n            </div>\n          </div>\n        </header>\n      </div>\n    )\n  }\n\n  loading() {\n    return (\n      <div className=\"app-load\">\n        Fetching rates datas\n      </div>\n    )\n  }\n\n  error() {\n    return (\n      <div className=\"app-error\">\n        <h1>FETCH ERROR</h1>\n        <p>Take a look at the console.log error...</p>\n      </div>\n    )\n  }\n\n  render () {\n    const { isLoading } = this.state;\n    const { fetchError } = this.state;\n    return (\n      <div className=\"app\">\n        { fetchError && this.error() }\n        { isLoading && this.loading() }\n        { isLoading || this.screen() }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}